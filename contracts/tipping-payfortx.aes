@compiler >= 4

include "List.aes"
include "Func.aes"
include "Option.aes"

payable contract WaelletTipAnyBasic =

  // TODO: add re-tips to state
  record state =
    { tips               : map(string, tip)
    , tips_index         : map(int, string)
    , pay_for_tx_service : address }

  record tip =
    { id        : int
    , sender    : address
    , timestamp : int
    , repaid    : bool
    , amount    : int
    , title     : string }

  datatype event =
    TipReceived(address, int, string)
    | TipWithdrawn(address, int, string)

  entrypoint init(pay_for_tx_service : address) : state =
    { tips = {},
      tips_index = {},
      pay_for_tx_service = pay_for_tx_service }

  entrypoint get_state() : state = state

  // TODO: check if url has already been tipped, if so re-tip
  payable stateful entrypoint tip(url : string, title : string) : unit =
    let id = Map.size(state.tips_index)
    let tip = { id        = id,
                sender    = Call.caller,
                timestamp = Chain.timestamp,
                repaid    = false,
                amount    = Call.value,
                title     = title }
    put(state{ tips[url] = tip, tips_index[id] = url })
    Chain.event(TipReceived(Call.caller, Call.value, url))

  stateful entrypoint claim(url : string, payout_receiver : address) =
    require_allowed_pay_for_tx_service()
    let amount = switch(Map.lookup(url, state.tips))
      None      => 0
      Some(tip) =>
        if(tip.repaid)
          0
        else
          put(state{tips[url].repaid = true})
          tip.amount

    // TODO: find re-tips once implemented
    require(amount != 0, "NO_ZERO_AMOUNT_PAYOUT")
    Chain.spend(payout_receiver, amount)
    Chain.event(TipWithdrawn(payout_receiver, amount, url))

  stateful function migrate_contract(new_contract : address) =
    // TODO: disallow use of this contract?
    require_allowed_pay_for_tx_service()
    Chain.spend(new_contract, Contract.balance)

  function require_allowed_pay_for_tx_service() =
    require(Call.caller == state.pay_for_tx_service, "NOT_ALLOWED")
