@compiler >= 4

include "List.aes"
include "Func.aes"
include "Option.aes"

payable contract WaelletTipAnyBasic =

  record state = 
    { tips          : map(string * int, tip)
    , tips_flat     : map(string, int)
    , pay_for_tx_service : address }

  record tip = 
    { sender        : address
    , received_at   : int
    , repaid        : bool
    , amount        : int
    , note          : option(string) }
    
  datatype event = 
    TipReceived(address, int, string)
    | TipWithdrawn(address, int, string)

  entrypoint init (relayer: address) : state =
    { tips = {},
      tips_flat = {},
      pay_for_tx_service = relayer }

  payable stateful entrypoint tip (url: string, note: option(string)) : unit =
    put(state{ tips[(url, size(url))] = new_tip(url, note),
               tips_flat[url = 0] @ n = n + 1 })
    Chain.event(TipReceived(Call.caller, Call.value, url))

  entrypoint tips_for_url(url : string) = tips_by_key(url)
  entrypoint get_state() : state = state
  
  stateful entrypoint claim(url: string, pay_to : address) =
    allowed()
    let amount = aggregate_unpaid_tips(url)
    do_the_stuff(url, size(url) - 1)
    Chain.spend(pay_to, amount)
    Chain.event(TipWithdrawn(pay_to, amount, url))
    
  stateful function do_the_stuff(url, i) =
    if(i < 0) ()
    else
      put(state{ tips[(url, i)].repaid = true })
      do_the_stuff(url, i - 1)  

  entrypoint unpaid(url : string) =
    aggregate_unpaid_tips(url)
  
  function aggregate_unpaid_tips(url : string) =
    List.sum(List.map((x) => x.amount, List.filter((x) => x.repaid == false, tips_for_url(url))))
    
  function tips_by_key(key : string) =
    [ state.tips[(key, n)] | n <- [0..size(key) - 1] ]

  function size(key : string) : int = state.tips_flat[key = 0]
  
  stateful function migrate(new_contract: address) =
    allowed()
    Chain.spend(new_contract, Contract.balance)
    
  function allowed() =
    require(Call.caller == state.pay_for_tx_service, "NOT_ALLOWED")

  stateful function new_tip(url : string, note: option(string)) : tip =
    { sender        = Call.caller,
      received_at   = Chain.timestamp,
      repaid        = false,
      amount        = Call.value,
      note          = note }

