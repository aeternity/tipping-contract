// ISC License
//
// Copyright (c) 2020, aeternity developers
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.


// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST

@compiler >= 4.2

contract TokenContract =
  stateful entrypoint transfer_allowance : (address, address, int) => unit
  stateful entrypoint transfer : (address, int) => unit

contract OracleService =
  record success_claim =
    { success : bool
    , caller : address
    , percentage : int }

  stateful entrypoint check_persist_claim : (string, address, bool) => success_claim
  payable stateful entrypoint query_oracle : (string, address) => unit

contract TippingV1 =
  type tip_id    = int
  type url_id    = int
  type retip_id  = int
  type url       = string
  type claim_gen = int

  record tip = { sender    : address
               , title     : string
               , claim_gen : claim_gen
               , timestamp : int
               , url_id    : url_id
               , amount    : int }

  record retip = { sender    : address
                 , amount    : int
                 , claim_gen : claim_gen
                 , tip_id    : tip_id }

  record state = { urls               : map(url, url_id)
                 , claims             : map(url_id, claim_gen * int)
                 , url_index          : map(url_id, url)
                 , tips               : map(tip_id, tip)
                 , retips             : map(retip_id, retip)
                 , owner              : address
                 , oracle_service     : OracleService }

  stateful entrypoint get_state : () => state

contract TippingV2BalanceReceiver =
  payable stateful entrypoint receive_migrate_balance: () => unit

// state migrator contract, external contract that makes state conversion from old to new format
payable contract TippingMigration =
  type tip_id    = int
  type url_id    = int
  type retip_id  = int
  type url       = string
  type claim_gen = int

  record tip = { sender       : address
               , title        : string
               , claim_gen    : claim_gen
               , timestamp    : int
               , url_id       : url_id
               , token        : option(TokenContract)
               , amount       : int
               , token_amount : int }

  record retip = { sender       : address
                 , amount       : int
                 , token_amount : int
                 , claim_gen    : claim_gen
                 , token        : option(TokenContract)
                 , tip_id       : tip_id }

  record state = { urls               : map(url, url_id)
                 , claims             : map(url_id, claim_gen * int * map(TokenContract, int))
                 , url_index          : map(url_id, url)
                 , tips               : map(tip_id, tip)
                 , retips             : map(retip_id, retip)
                 , owner              : address
                 , oracle_service     : OracleService }

  // 1. read state from v1 contract
  // 2. convert maps from v1 tip/retip/state records to v2 records
  // 3. in v2 init copy state from migrator
  // 4. manually migrate balance from v1 to v2
  entrypoint init(tipping_v1 : TippingV1) : state =
    let tipping_v1_state = tipping_v1.get_state()
    { urls = tipping_v1_state.urls,
      claims = Map.from_list([ (url_id, (claim_gen, amount, {})) | (url_id, (claim_gen, amount)) <- Map.to_list(tipping_v1_state.claims) ]),
      url_index = tipping_v1_state.url_index,
      tips = Map.from_list([ (url_id, { sender = tip.sender
                                      , title = tip.title
                                      , claim_gen = tip.claim_gen
                                      , timestamp = tip.timestamp
                                      , url_id = tip.url_id
                                      , token = None
                                      , amount = tip.amount
                                      , token_amount = 0 }) | (url_id, tip) <- Map.to_list(tipping_v1_state.tips) ]),
      retips = Map.from_list([ (url_id, { sender = retip.sender
                                        , amount = retip.amount
                                        , token_amount = 0
                                        , claim_gen = retip.claim_gen
                                        , token = None
                                        , tip_id = retip.tip_id }) | (url_id, retip) <- Map.to_list(tipping_v1_state.retips) ]),
      owner = tipping_v1_state.owner,
      oracle_service = tipping_v1_state.oracle_service }

  entrypoint get_state() : state = state

  stateful entrypoint migration_forward_balance(c : TippingV2BalanceReceiver) =
    c.receive_migrate_balance(value = Contract.balance)
