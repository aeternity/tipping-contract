include "List.aes"

contract TokenContract =
  stateful entrypoint transfer_allowance : (address, address, int) => unit
  stateful entrypoint transfer : (address, int) => unit

contract OracleService =
  type oracle_type = oracle(string, string)
  type oracle_query_tuples = list(oracle_type * oracle_query(string, string))

  record success_claim = { success : bool, account : address, percentage : int }
  record state = { trusted_oracles : map(int, oracle_type), trusted_oracle_seq : int, oracle_queries : map(string, oracle_query_tuples), minimum_amount_of_oracles : int, success_claimed_urls : map(string, success_claim), owner : address }

  stateful entrypoint check_persist_claim : (string, address, bool) => success_claim
  payable stateful entrypoint query_oracle : (string, address) => unit
  entrypoint get_state : () => state

contract Tipping =
  type tip_id = int
  type url_id = int
  type retip_id = int
  type url = string
  type claim_gen = int
  type amount = int
  type receiver = address
  type receiver_str = string

  datatype tip
    = AeTip(tip_meta, url_id, amount, claim_gen)
    | TokenTip(tip_meta, url_id, tip_token_data, claim_gen)
    | DirectAeTip(tip_meta, receiver, amount)
    | DirectTokenTip(tip_meta, receiver, tip_token_data)

  datatype event
    = TipReceived(address, amount, url)
    | ReTipReceived(address, amount, url)
    | TipWithdrawn(address, amount, url)
    | TipTokenReceived(address, amount, url, TokenContract)
    | ReTipTokenReceived(address, amount, url, TokenContract)
    | TipDirectReceived(address, amount, receiver_str)
    | TipDirectTokenReceived(address, amount, receiver_str, TokenContract)

  record tip_token_data = { token : TokenContract, amount : int }
  record tip_meta = { sender : address, title : string, timestamp : int }
  record retip = { sender : address, amount : int, token_amount : int, claim_gen : claim_gen, token: option(TokenContract), tip_id : tip_id }
  record state = { urls : map(url, url_id), claims : map(url_id, claim_gen * int * map(TokenContract, int)), url_index : map(url_id, url), tips : map(tip_id, tip), retips : map(retip_id, retip), oracle_service : OracleService, version : string }

  entrypoint get_state : () => state

contract TippingGetter =
  entrypoint get_tip_by_id(c : Tipping, tip_id : int) : option(Tipping.tip) =
    Map.lookup(tip_id, c.get_state().tips)

  entrypoint get_url_by_id(c : Tipping, url_id : int) : option(Tipping.url) =
    Map.lookup(url_id, c.get_state().url_index)

  entrypoint get_retip_by_id(c : Tipping, retip_id : int) : option(Tipping.retip) =
    Map.lookup(retip_id, c.get_state().retips)

  entrypoint get_claims_by_url_id(c : Tipping, url_id : int) : option(Tipping.claim_gen * int * map(TokenContract, int)) =
    Map.lookup(url_id, c.get_state().claims)

  entrypoint get_oracle_claimed_urls_by_account(c : Tipping, account : address) : list(string) =
    let list_success_claimed_urls = Map.to_list(c.get_state().oracle_service.get_state().success_claimed_urls)
    [ url | (url, success_claim) <- list_success_claimed_urls, if(success_claim.success && success_claim.account == account) ]

  entrypoint get_oracle_claimed_urls(c : Tipping) : list(string) =
    let list_success_claimed_urls = Map.to_list(c.get_state().oracle_service.get_state().success_claimed_urls)
    [ url | (url, success_claim) <- list_success_claimed_urls, if(success_claim.success) ]

  entrypoint get_oracle_claim_by_url(c : Tipping, url : string) : option(OracleService.success_claim) =
    Map.lookup(url, c.get_state().oracle_service.get_state().success_claimed_urls)
