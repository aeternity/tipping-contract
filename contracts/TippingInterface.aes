contract TokenContract =
  stateful entrypoint transfer_allowance : (address, address, int) => unit
  stateful entrypoint transfer : (address, int) => unit

contract OracleService =
  record success_claim = { success : bool, caller : address, percentage : int }

  stateful entrypoint check_persist_claim : (string, address, bool) => success_claim
  payable stateful entrypoint query_oracle : (string, address) => unit

contract Tipping =
  type tip_id = int
  type url_id = int
  type retip_id = int
  type url = string
  type claim_gen = int

  record tip = { sender : address, title : string, claim_gen : claim_gen, timestamp : int, url_id : url_id, token : option(TokenContract), amount : int, token_amount : int }
  record retip = { sender : address, amount : int, token_amount : int, claim_gen : claim_gen, token: option(TokenContract), tip_id : tip_id }
  record state = { urls : map(url, url_id), claims : map(url_id, claim_gen * int * map(TokenContract, int)), url_index : map(url_id, url), tips : map(tip_id, tip), retips : map(retip_id, retip), owner : address, oracle_service : OracleService }

  payable stateful entrypoint tip : (string, string) => int
  payable stateful entrypoint tip_token : (string, string, TokenContract, int) => int
  payable stateful entrypoint retip : (tip_id) => int
  payable stateful entrypoint retip_token : (tip_id, TokenContract, int) => int
  payable stateful entrypoint pre_claim : (string, address) => unit
  stateful entrypoint claim : (string, address, bool) => unit
  entrypoint get_state : () => state
